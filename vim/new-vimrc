" vim-plug {{{
" Install vim-plug if it isn't yet
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" List plugins
call plug#begin('~/.vim/plugged')

" Big functionalities
Plug 'vimwiki/vimwiki'              " Wiki notetaking in vim
Plug 'Yggdroot/LeaderF'             " Fuzzy finder
Plug 'majutsushi/tagbar'            " Lists the file's tags
Plug 'ludovicchabant/vim-gutentags' " Manages tags file for us (important for <C-i>)

" Vim lines
Plug 'itchyny/lightline.vim'        " Light status line
Plug 'mgee/lightline-bufferline'    " Bufferline for lightline

" Git
Plug 'tpope/vim-fugitive'     " git integration in vim
Plug 'airblade/vim-gitgutter' " git diff in the gutter

" Syntax
Plug 'scrooloose/syntastic'                             " Syntax checker (synchronous, but awesome)
Plug 'Rip-Rip/clang_complete', {'for': ['cpp', 'c']}    " C/C++ autocomplete

" Style
Plug 'editorconfig/editorconfig-vim'                    " Have vim adapt to different projects
Plug 'godlygeek/tabular'                                " Aligns things
Plug 'raimondi/delimitmate'                             " Auto-pairs parenses and other things
Plug 'ap/vim-css-color', {'for': ['html', 'css', 'js']} " Preview colours in the file

" General additions
Plug 'ervandew/supertab'    " Easy tab completion
Plug 'markonm/traces.vim'   " Shows preview for Ex commands
Plug 'tpope/vim-surround'   " Add object for surrounding elements
Plug 'tpope/vim-commentary' " Auto-comment with gc
Plug 'tpope/vim-repeat'     " Add . command support for plugins

" Tmux
Plug 'christoomey/vim-tmux-navigator' " Navigating from vim and tmux panes
Plug 'epeli/slimux'                   " tmux helper for REPL and shell

" Looks
Plug 'morhetz/gruvbox'           " A theme inspired by solarized
Plug 'romainl/Apprentice'        " Nice theme, yés good
Plug 'sheerun/vim-wombat-scheme' " Simple dark theme

call plug#end()
" automatic filetype plugin indent on and syntax enable
"}}}

" Plugins config{{{
" vimwiki{{{
let wiki = {}
let wiki.path = '~/Notebooks/vimwiki/'
let wiki.syntax = 'markdown'
let wiki.ext = '.Rmd'
let wiki.nested_syntaxes = {'python': 'python', 'c++': 'cpp', 'sh': 'sh', 'R': 'R', 'c': 'c', 'tex': 'tex'}
" heig wiki parameters
let heig = {}
let heig.path = '~/Notebooks/HEIGWiki/'
let heig.syntax = 'markdown'
let heig.ext = '.Rmd'
let heig.nested_syntaxes = wiki.nested_syntaxes
" vimwiki dictionary of wikis
let g:vimwiki_list = [wiki, heig]
" vimwiki parameters
let g:vimwiki_folding='expr'
let g:vimwiki_conceallevel=0
"}}}

" Syntastic{{{
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" cpp
let g:syntastic_cpp_compiler_options = '-std=c++11 -Wall -Wconversion -Wextra -pedantic'
let g:syntastic_cpp_check_header = 1
"}}}

" Leaderf
let g:Lf_ShowHidden=1

" Defaults for Tagbar
let g:tagbar_map_showproto = "f"		" f to show function's prototype
let g:tagbar_map_togglefold = "<Space>"
let g:tagbar_width = 40
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1

" delimitMate
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1

" RipClang
let g:clang_library_path = '/usr/lib/llvm-7/lib/libclang.so.1'
let g:clang_user_options = '-std=c++11'
"}}}

" Looks{{{
set background=dark
colorscheme apprentice

" Lightline
set laststatus=2        " Always show status bar
set showtabline=2	" Always show tab bar
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ }
let g:lightline.tabline          = {'left': [['buffers']]}
let g:lightline.component_expand = {'buffers': 'lightline#bufferline#buffers'}
let g:lightline.component_type   = {'buffers': 'tabsel'}

" Colorschemes config
let g:gruvbox_contrast_light = 'hard'
"}}}

" Options{{{
set path+=** " Tab-completion in command line
set wildmenu " Display menu showing following files

" HEIG max column count
autocmd FileType cpp,hpp,c,h,java setlocal colorcolumn=85

" Disable current line highlight when split not in focus
augroup line_highlight
    autocmd!
    autocmd BufLeave * :set nocursorline
    autocmd BufEnter * :set cursorline
    autocmd InsertEnter * :set cursorline
    autocmd InsertLeave * :set nocursorline
augroup END

" Enable spellcheck for certain files
autocmd FileType vimwiki,markdown,gitcommit,tex setlocal spell spelllang=en,fr

" Jump to the last position when reopening a file
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" Set options
let g:tex_flavor='latex'
set timeoutlen=1000 ttimeoutlen=0    " Removes the delay for escape key in tmux

set showcmd            " Show (partial) command in status line.
set showmatch          " Show matching brackets.
set noshowmode         " Don't show the current mode (airline)
set ignorecase         " Do case insensitive matching
set smartcase          " Do smart case matching (requires ignorecase)
set incsearch          " Incremental search
set mouse=a            " Enable mouse usage (all modes)
set wrapscan           " Searches wrap around end of file
set linebreak          " Break only at word boundaries
set notimeout          " Don't timeout after Leader for example
set ttimeout           " Don't do the previous thing for Escape

set relativenumber
set number		             " Show number line in middle of relativenumber
set splitright                       " Open new splits on the right
set splitbelow                       " Open new splits below, if not on the right
set scrolloff=3                      " Start scrolling three lines before end
set sidescrolloff=3                  " Start scrolling three columns before end
set synmaxcol=300                    " Only syntax highlight the first so much columns
set confirm                          " Dialog when :q, :w or :wq fails
set undofile                         " Persistent undo across sessions

set completeopt=menu,menuone,noselect,noinsert

" Set dirs for swap and others
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
"}}}

" Custom mappings{{{
let mapleader = ','

" Basics{{{
" Quit / save
nnoremap <Leader>q :q<CR>
nnoremap <Leader>s :w<CR>
nnoremap <Leader>wq :wq<CR>
nnoremap <Leader>wa :wa<CR>

" Easier redo
nnoremap U <C-r>

" Remap backtick to follow mark
noremap ' `

" Remap spell bindings
nnoremap z0 z=

" Movement
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'
nnoremap <silent> <Up> gk
nnoremap <silent> <Down> gj
nnoremap <silent> <Home> g<Home>
nnoremap <silent> <End> g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End> <C-o>g<End>
noremap J }
noremap K {

" Copy and paste to and from system clipboard
nnoremap cy "+y
nnoremap cyy "+yy
nnoremap cp "+p
nnoremap cP "+P
"}}}

" Buffers{{{
nnoremap H :bp<CR>
nnoremap L :bn<CR>

" Close buffer
nnoremap <Leader>x :bp\|bd #<CR>

" Open current buffer to the right, and change this split's
" buffer to the previous
nmap <silent> <Leader>v :vs<CR><C-h>:bp<CR><C-l>
nmap <silent> <Leader>h :sp<CR><C-k>:bp<CR><C-l>

" Resize panes
nnoremap <silent> <C-w>l :vertical resize +10<CR>
nnoremap <silent> <C-w>h :vertical resize -10<CR>
nnoremap <silent> <C-w>k :resize +10<CR>
nnoremap <silent> <C-w>j :resize -10<CR>
"}}}

" Misc{{{
" Write when the file wasn't opened with sudo privileges
cmap w!! w !sudo tee % > /dev/null

" F1 to open custom bindings help
nnoremap <silent> <F1> :60vsplit $HOME/Dev/dotfiles/vim/bindings.md<CR>

" Toggles for features
nnoremap <silent> <Leader>tt :TagbarToggle<CR>
nnoremap <F4> :GitGutterToggle<CR>
inoremap <F4> <Esc> :GitGutterToggle<CR>gi
nnoremap <F6> :setlocal spell! spelllang=en,fr<CR>
inoremap <F6> <Esc>:setlocal spell! spelllang=en,fr<CR>gi
nnoremap <F7> :TagbarToggle<CR>
inoremap <F7> <Esc>:TagbarToggle<CR>gi
nnoremap <F8> :SyntasticToggleMode<CR>
inoremap <F8> <Esc>:SyntasticToggleMode<CR>gi
"}}}

" Slimux{{{
nnoremap <Leader>< :SlimuxREPLSendLine<CR>
vnoremap <Leader>< :SlimuxREPLSendSelection<CR>
nnoremap <Leader>< :SlimuxREPLConfigure<CR>
nnoremap <Leader>< :SlimuxShellPrompt<CR>
nnoremap <Leader>< :SlimuxShellLast<CR>
nnoremap <Leader>< :SlimuxShellConfigure<CR>
"}}}

" Programming helpers{{{
" Go to next placeholder
nnoremap <Leader><Tab> <Esc>/<++><CR>ca<

" Insert semicolon at end of line
inoremap <Leader>; <Esc>A;<Esc>
nnoremap <Leader>; A;<Esc>

" Insert curly braces at end of line
inoremap <Leader>à <Esc>A<Space>{}<Esc>i
nnoremap <Leader>à A<Space>{}<Esc>i
"}}}

" Compiling{{{
" R markdown to pdf (in pdf subfolder)
autocmd FileType rmd nmap <silent> <Leader>c :!echo<space>"require(rmarkdown);<space>render('<c-r>%')"<space>\|<space>R<space>--vanilla;mv %:r.pdf %:p:h/pdf/%:t:r.pdf<CR><CR>
" Read HEIGWiki pdf file
autocmd FileType vimwiki nmap <silent> <Leader>e :!zathura ~/Notebooks/HEIGWiki/pdf/%:t:r.pdf 2&> /dev/null &<CR><CR>

" Create pdf from Latex
autocmd FileType tex nmap <buffer> <silent> <Leader>c :!pdflatex %<CR><CR>
" Open LaTeX PDF file in zathura
nmap <silent> <Leader>e :!zathura %:r.pdf&<CR><CR>
"}}}
"}}}

" Custom functions{{{
command Vconf e ~/Dev/dotfiles/vim/vimrc

" Write when the file wasn't opened with sudo privileges
cmap w!! w !sudo tee % > /dev/null

" Insert snippets
cmap snip r ~/Dev/dotfiles/vim/snippets/
"}}}

" Tab config (when editorconfig not in use) {{{
" set tabstop=8 " default
set softtabstop=4
set shiftwidth=4
set expandtab
"}}}

" Code folding {{{
set foldmethod=marker " Fold based on markers
set foldnestmax=5     " 5 levels deep folds
set foldenable        " Enable folding
set foldlevel=99      " Leave folds open by default

autocmd FileType vim set foldlevel=0   " Close all folds by default

" Spacebar to open/close folds in normal mode,
" and also to create new ones in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
"}}}
