" Never move this
runtime! debian.vim
set nocompatible

" Visual stuff"{{{
" Enables syntax highlighting by default.
if !exists("g:syntax_on")
    syntax enable
endif

" Colour misspelled words in red
highlight SpellBad ctermfg=001 ctermbg=none cterm=none

" INF1 max column count
autocmd FileType cpp,hpp,c,h setlocal colorcolumn=85

" If using a dark background within the editing area
set background=dark

"benokai, darkblue, desert, koehler, molokai...
colorscheme benokai
"}}}

" Custom bindings{{{
let mapleader = ',' "Set a Leader for more bindings

" Misc{{{
" Easier redo
nnoremap t <C-r>

" Copy and paste to and from system clipboard
noremap cy "+y
noremap cp "+p
noremap cP "+P

" Use enter to create new lines w/o entering insert mode
nnoremap <CR> o<Esc>k

" F1 to open custom bindings help
nnoremap <silent> <F1> :40vsplit $HOME/Dev/dotfiles/vim/bindings.md<CR>

" Write when the file wasn't opened with sudo privileges
cmap w!! w !sudo tee % > /dev/null
"}}}

" Basic (Movement, save, spell){{{
" Movement
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'
noremap  <silent> <Up>   gk
noremap  <silent> <Down> gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End> <C-o>g<End>

" Skip lines: faster navigation
noremap J }
noremap K {
noremap H :bp<CR>
noremap L :bn<CR>

" Easy shortcuts
nmap <silent> <Leader>s :w<CR>
nmap <silent> <Leader>q :q<CR>
nmap <silent> <Leader>wq :wq<CR>
nmap <silent> <Leader>wa :wa<CR>

" Remap spell bindings
nnoremap zz z=
"}}}

" Buffers, panes{{{
" Open current buffer to the right, and change this split's
" buffer to the previous
nmap <silent> <Leader>v :vs<CR><C-h>:bp<CR><C-l>
nmap <silent> <Leader>hh :vs<CR><C-h>:bp<CR><C-l>

" Back one buffer
nnoremap <Leader>. :bp<CR>
" Forward one buffer
nnoremap <Leader>- :bn<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <Leader>x :bp\|bd #<CR>

" Resize panes
nnoremap <silent> <C-w>l :vertical resize +10<CR>
nnoremap <silent> <C-w>h :vertical resize -10<CR>
nnoremap <silent> <C-w>k :resize +10<CR>
nnoremap <silent> <C-w>j :resize -10<CR>
"}}}

" Toggles for insert mode {{{
nnoremap <F5> :setlocal spell! spelllang=en,fr<CR>
inoremap <F5> <Esc>:setlocal spell! spelllang=en,fr<CR>gi
"}}}

" Prog helpers{{{
" Go to next placeholder
nnoremap <Leader><Tab> <Esc>/<++><CR>ca<

" Insert semicolon at end of line
inoremap <Leader>; <Esc>A;<Esc>
nnoremap <Leader>; A;<Esc>

" Insert curly braces at end of line
inoremap <Leader>à <Esc>A<Space>{}<Esc>i
nnoremap <Leader>à A<Space>{}<Esc>i

" Insert chevrons at end of line (i.e. for cout)
inoremap <Leader>< <Esc>A<Space><<<Space>
nnoremap <Leader>< A<Space><<<Space>

" Mappings for following tags (<C-p> to go back)
nnoremap <C-i> <C-]>
nnoremap <C-o> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Remap increment
nnoremap <C-y> <C-a>

nnoremap <Leader>ms :set syntax=rmd<CR>
" Markdown headers
nmap <Leader>h1 I#<Space><Esc>
imap <Leader>h1 #<Space>
nmap <Leader>h2 I##<Space><Esc>
imap <Leader>h2 ##<Space>
nmap <Leader>h3 I###<Space><Esc>
imap <Leader>h3 ###<Space>
" Italics, bold, highlight and links
nmap <Leader>mi ysiw*
nmap <Leader>mb ysiw*lysiw*
nmap <Leader>mh ysiw`
nmap <Leader>ml a[<++>](<++>)<Esc>0
" Code chunks
nmap <Leader>mc I````{}<CR>```<Esc>klla
imap <Leader>mc ````{}<CR>```<Esc>klla
" vimwiki create table
nnoremap <Leader>mm ggI---<CR>title: <++><CR>output: pdf_document<CR>fontsize: 12pt<CR>geometry: margin=0.7in<CR>theme: flatly<CR>---<CR><Esc>gg

" Latex/mathjax helpers
nmap <Leader>la i\begin{align*}<CR>\end{align*}<Esc>k
nmap <Leader>lm i\begin{pmatrix}<CR>\end{pmatrix}<Esc>k
nmap <Leader>ls i\mathbb{}<Esc>i
nmap <Leader>lf i\frac{
nmap <Leader>lr i\sqrt{
nmap <Leader>lc i\cdot
nmap <Leader>li i\begin{center}<CR>\fbox{\includegraphics[width=9cm]{<++>}}<CR>\end{center}<Esc>kk

" Laravel framework commons
" nmap <Leader>lr :e routes/web.php<CR>
" nmap <Leader>la :e config/app.php<CR>
" nmap <Leader>ld :e config/database.php<CR>
" nmap <Leader>lc :e composer.json<CR>
"}}}

" Compile files (prog, pdfs...){{{
" R markdown to pdf (in pdf subfolder)
autocmd FileType rmd nmap <silent> <Leader>cc :!echo<space>"require(rmarkdown);<space>render('<c-r>%')"<space>\|<space>R<space>--vanilla;mv %:r.pdf %:p:h/pdf/%:t:r.pdf<CR><CR>

" Creates html file with mathjax support in html folder
nmap <silent> <Leader>ph :!pandoc % -s --mathjax --css assets/pandoc.css -o /var/www/VimWikiSite/%:t:r.html<CR><CR>
" Creates html file with table of content
nmap <silent> <Leader>pt :!pandoc % -s --mathjax --toc --css pandoc.css -o html/%:r.html<CR><CR>

" Create pdf from Latex
autocmd FileType tex nmap <buffer> <silent> <Leader>cc :!pdflatex %<CR><CR>
autocmd FileType tex nmap <buffer> <silent> <Leader>cx :!xelatex %<CR><CR>

" Open LaTeX PDF file in zathura
nmap <silent> <Leader>lz :!zathura %:r.pdf&<CR><CR>
" Open RMarkdown PDF file in zathura
nmap <silent> <Leader>mz :!zathura ~/Notebooks/vimwiki/pdf/%:t:r.pdf&<CR><CR>

" g++ compiler
" ---current file
autocmd FileType cpp,hpp,h nmap <buffer> <Leader>cc :!g++ % -Wall -Wconversion -Wextra -pedantic -std=c++11 -o bin/%:r.out<CR><CR>
" ---all files
autocmd FileType cpp,hpp,h nmap <buffer> <Leader>ca :!g++ *.cpp -Wall -Wconversion -Wextra -pedantic -std=c++11 -o bin/%:r.out<CR><CR>
" gcc compiler
autocmd FileType c nmap <buffer> <Leader>cc :!gcc % -Wall -Wconversion -Wextra -pedantic -std=c11 -lm -o bin/%:r.out<CR><CR>
autocmd FileType c nmap <buffer> <Leader>ca :!gcc *.c -Wall -Wconversion -Wextra -pedantic -std=c11 -lm -o bin/%:r.out<CR><CR>
" Makefile
autocmd FileType cpp,hpp,h nmap <buffer> <Leader>cm :!make<CR>
" ---compile for debugging
autocmd FileType cpp,hpp,h nmap <buffer> <Leader>cd :!g++ *.cpp -g -O0 -std=c++11 -o bin/%:r_debug.out<CR><CR>
autocmd FileType c nmap <buffer> <Leader>cE :!gcc -E % -o extendedsrc.i<CR><CR>:e extendedsrc.i<CR>

" Run current file's binary
autocmd FileType cpp,c nmap <Leader>ce :!tmux send-keys -t right ./bin/%:r.out C-m<CR><CR>
" clean binaries
autocmd FileType cpp,hpp,c,h nmap <buffer> <Leader>cq :!rm bin/*.out<CR><CR>
" valgrind
autocmd FileType cpp,hpp,h nmap <buffer> <Leader>cv :!tmux send-keys -t right "valgrind --leak-check=full --show-leak-kinds=all ./bin/%:r_debug.out" C-m<CR><CR>
"}}}

"}}}

" Custom functions and commands{{{
" Used to make some fiddly commands work silently, and redraw the screen afterwards
command! -nargs=1 Silent
    \   execute 'silent !' . <q-args>
    \ | execute 'redraw!'

command! MakeTags !ctags -R .

command SnipCPPex 0r ~/Dev/dotfiles/vim/snippets/CPPEx.txt
command SnipCex 0r ~/Dev/dotfiles/vim/snippets/CEx.txt
command SnipINFlab 0r ~/Dev/dotfiles/vim/snippets/CPPLab.txt
command SnipASDlab 0r ~/Dev/dotfiles/vim/snippets/ASDLab.txt
command SnipLaTeX 0r ~/Dev/dotfiles/vim/snippets/Latex.txt
command SnipLaTeXgraph r ~/Dev/dotfiles/vim/snippets/LatexGraph.txt
command SnipDoxyFunc r ~/Dev/dotfiles/vim/snippets/DoxyFunc.txt

command Vconf e ~/Dev/dotfiles/vim/vimrc
command Tconf e ~/.tmux.conf
"}}}

" Autocmd, misc{{{
" Disable current line highlight when split not in focus
augroup line_highlight
    autocmd!
    autocmd BufLeave * :set nocursorline
    autocmd BufEnter * :set cursorline
    autocmd InsertEnter * :set cursorline
    autocmd InsertLeave * :set nocursorline
augroup END

" Enable spellcheck for certain files
autocmd FileType markdown,gitcommit,tex setlocal spell spelllang=en,fr

" Tab-completion for files
set path+=**
set wildmenu "Display all matching files with tab

" Jump to the last position when reopening a file
if has("autocmd")
    au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Load indentation rules and plugins according to the detected filetype.
if has("autocmd")
    filetype plugin indent on
endif

"}}}

" Set options{{{
let g:tex_flavor='latex'

set showcmd            " Show (partial) command in status line.
set showmatch          " Show matching brackets.
set encoding=utf-8     " The encoding displayed.
set fileencoding=utf-8 " The encoding written to file.
set backspace=2
set ignorecase         " Do case insensitive matching
set smartcase          " Do smart case matching
set incsearch          " Incremental search
set autowrite          " Automatically save before :next and :make...
set hidden             " Hide buffers when they are abandoned
set mouse=a            " Enable mouse usage (all modes)
set wrapscan           " Searches wrap around end of file
set linebreak          " Break only at word boundaries
set notimeout          " Don't timeout after Leader for example
set ttimeout           " Don't do the previous thing for Escape

" Set more options
set number
set cursorline                       " Highlight line where cursor is
set shortmess+=I                     " Don't show the welcome screen
set noshowmode                       " Don't show the current mode (airline)
set omnifunc=syntaxcomplete#Complete
set completeopt=menu,menuone         " Always show the menu
set timeoutlen=1000 ttimeoutlen=0    " Removes the delay for escape key in tmux
set autoread                         " Reload files changed outside vim
set conceallevel=0                   " Don't hide characters in md and such
set splitright                       " Open new splits on the right
set splitbelow                       " Open new splits below, if not on the right
set scrolloff=3                      " Start scrolling three lines before end
set sidescrolloff=3                  " Start scrolling three columns before end
set synmaxcol=300                    " Only syntax highlight the first so much columns
set confirm                          " Dialog when :q, :w or :wq fails
set undofile                         " Persistent undo across sessions

" Tabs
" set smartindent
" set tabstop=4
set autoindent
set noexpandtab 	"Tabs ftw
set smarttab 		"Tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set softtabstop=4 	"Edit as if the tabs are 4 characters wide
set shiftwidth=4 	"Number of spaces to use for indent and unindent
set shiftround 		"Round indent to a multiple of 'shiftwidth'

" Set dirs for swap and others
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
" set tags+=~/.vim/tags//
"}}}

" Code folding{{{
set foldmethod=marker " Fold based on markers
set foldnestmax=5     " 5 levels deep folds
set foldenable        " Enable folding
set foldlevel=99       " Close all folds by default

" Spacebar to open/close folds in normal mode,
" and also to create new ones in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
"}}}
