" Never move this
runtime! debian.vim

set nocompatible "Not compatible with vi

" Vundle plugins"{{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim "Set runtime path to include Vundle
call vundle#begin()

" Plugins list
Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/syntastic'			"Syntax checker
Plugin 'ajh17/VimCompletesMe'			"Tab completion using vim native completion

Plugin 'tpope/vim-fugitive'				"git integration in vim
Plugin 'scrooloose/nerdtree'			"Classic nerdtree
Plugin 'Xuyuanp/nerdtree-git-plugin'	"git interaction in nerdtree
Plugin 'airblade/vim-gitgutter'			"git diff in the gutter
Plugin 'terryma/vim-multiple-cursors'	"Sublime style multiple cursors

Plugin 'vim-airline/vim-airline'		"Nice looking airline
Plugin 'ap/vim-css-color'				"Preview colours in the file
" Plugin 'edkolev/tmuxline.vim'			"Generates tmux statusline styles

Plugin 'christoomey/vim-system-copy'	"Access system clipboard (requires xsel package)
Plugin 'tommcdo/vim-exchange'			"Exchange two pieces of text
Plugin 'tpope/vim-surround'				"Add s object for surrounding elements
Plugin 'tpope/vim-commentary'			"Auto-comment with gc
Plugin 'tpope/vim-repeat'				"Add . command support for plugins
Plugin 'jiangmiao/auto-pairs'			"Auto-pairs parenses and other things
Plugin 'godlygeek/tabular'				"Aligns things

Plugin 'benmills/vimux'					"Interact with a tmux pane from vim
Plugin 'christoomey/vim-tmux-navigator' "Makes navigating from vim and tmux panes more consistent

" Colorschemes/themes...
Plugin 'vim-airline/vim-airline-themes'	"Themes for airline
Plugin 'morhetz/gruvbox'				"A theme inspired by solarized with airline theme
Plugin 'jacoborus/tender.vim'			"A nice theme with airline theme
Plugin 'flazz/vim-colorschemes'			"A whole lot of themes... Heavy...
Plugin 'ryanoasis/vim-devicons'			"Adds icons to NERDTree, Airline etc

" All plugins before this
call vundle#end()
"}}}

" Defaults for plugins"{{{
" Defaults for YouCompleteMe
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
autocmd FileType php,python,c let b:vcm_tab_complete = "omni"
autocmd FileType markdown,txt setlocal complete+=k/usr/share/dict/words

" Defaults for syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_php_checkers = ['php']

" Airline status
set laststatus=2                                  " Show the satus line all the time
set showtabline=2 " Always show tab bar
let g:airline_skip_empty_sections=1
let g:airline#extensions#tabline#enabled=1        " Show tabline for buffers
let g:airline#extensions#tabline#buffer_nr_show=1 " Show buffer numbers
let g:airline#extensions#syntastic#enabled=1	  " Enable Syntastic support
let g:airline#extensions#branch#enabled=1		  " Enable Git support
let g:airline_powerline_fonts=1                   " Use powerline font to its full potential
"}}}

" Visual stuff"{{{
" Enables syntax highlighting by default.
if !exists("g:syntax_on")
	syntax enable
endif

" If using a dark background within the editing area
set background=dark

" True colour terminal
"set termguicolors

"gruvbox, tender, benokai, darkblue, desert, koehler, molokai...
colorscheme gruvbox
"gruvbox, tender, bubblegum
let g:airline_theme = 'gruvbox'
"}}}

" Last position, indent rules, others"{{{
" Jump to the last position when reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Load indentation rules and plugins according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Close vim if NERDTree is the last opened buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Tab-completion for files
set path+=**
set wildmenu "Display all matching files with tab
"}}}

" Set options"{{{
set showcmd    " Show (partial) command in status line.
set showmatch  " Show matching brackets.
set ignorecase " Do case insensitive matching
set smartcase  " Do smart case matching
set incsearch  " Incremental search
set autowrite  " Automatically save before commands like :next and :make
set hidden     " Hide buffers when they are abandoned
set mouse=a    " Enable mouse usage (all modes)
set wrapscan   " Searches wrap around end of file

" Set more options
set number relativenumber
set cursorline
set noshowmode                    " Don't show the current mode (airline)
set completeopt=menu              " Stops the buffer from opening on omnicomplete
set encoding=utf8
set timeoutlen=1000 ttimeoutlen=0 " Removes the delay for escape key
set autoread                      " Reload files changed outside vim
set splitright                    " Open new splits on the right
set scrolloff=3                   " Start scrolling three lines before border of window
set sidescrolloff=3               " Start scrolling three columns before vertical border
"}}}

" Tab control"{{{
set autoindent
set smartindent
set noexpandtab 	"Tabs ftw
set smarttab 		"Tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 		"The visible width of tabs
set softtabstop=4 	"Edit as if the tabs are 4 characters wide
set shiftwidth=4 	"Number of spaces to use for indent and unindent
set shiftround 		"Round indent to a multiple of 'shiftwidth'
"}}}

" Code folding settings"{{{
set foldmethod=marker " Fold based on indent
set foldnestmax=5     " 5 levels deep folds
set foldenable        " Enable folding
set foldlevel=0       " Close all folds by default

" Space to open/close folds in normal mode, to create new ones in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
"}}}

" Custom commands"{{{
command! MakeTags !ctags -R .

command CheatSheet vsp ~/Dev/dotfiles/vim/vimcheatsheet.md
command TmuxCheatSheet vsp ~/Dev/dotfiles/tmux/tmuxcheatsheet.md
command VimRC vsp ~/.vimrc
command TmuxConf vsp ~/.tmux.conf
"}}}

" Custom bindings"{{{
let mapleader = ',' "Set a leader for more bindings

nmap <silent> <leader>n :NERDTreeToggle<cr>
let NERDTreeMapActivateNode='<space>'

nmap <silent> <leader>g :GitGutterToggle<cr>
nmap <silent> <leader>s :w<cr>
nmap <silent> <leader>q :q<cr>

"Use enter to create new lines w/o entering insert mode
nnoremap <CR> o<Esc>

" resize panes
nnoremap <silent> <leader>l :vertical resize +5<cr>
nnoremap <silent> <leader>h :vertical resize -5<cr>
nnoremap <silent> <leader>k :resize +5<cr>
nnoremap <silent> <leader>j :resize -5<cr>

" Skip lines: faster navigation
noremap J 5j
noremap K 5k

" Mappings to access buffers{{{
" Back one buffer
nnoremap <Leader>. :bp<CR>
" Forward one buffer
nnoremap <Leader>- :bn<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <Leader>x :bp\|bd #<CR>
"}}}

" Navigate between display lines{{{
noremap  <silent> <Up>   gk
noremap  <silent> <Down> gj
noremap  <silent> k gk
noremap  <silent> j gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End> <C-o>g<End>
"}}}

" Write when the file wasn't opened with sudo privileges
cmap w!! w !sudo tee % > /dev/null
"}}}
