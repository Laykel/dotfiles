" Never move this
runtime! debian.vim
set nocompatible "Not compatible with vi

" Vundle plugins"{{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim "Set runtime path to include Vundle
call vundle#begin()

" Plugins list
Plugin 'VundleVim/Vundle.vim'

" Syntax
Plugin 'ervandew/supertab'				"Easy tab completion
Plugin 'scrooloose/syntastic'			"Syntax checker
Plugin 'sheerun/vim-polyglot'			"100+ languages syntax

" Tags, style
Plugin 'ludovicchabant/vim-gutentags'	"Manages tags file for us
Plugin 'majutsushi/tagbar'				"Lists the file's tags
Plugin 'editorconfig/editorconfig-vim'	"Have vim adapt to different projects
Plugin 'ap/vim-css-color'				"Preview colours in the file

" Functionality
Plugin 'vim-airline/vim-airline'		"Nice looking airline
Plugin 'ctrlpvim/ctrlp.vim'				"Fuzzy finder/buffer manager
Plugin 'scrooloose/nerdtree'			"Classic nerdtree
Plugin 'Xuyuanp/nerdtree-git-plugin'	"git interaction in nerdtree
Plugin 'mattn/emmet-vim'				"Emmet for vim (<C-y>,)
Plugin 'vimwiki/vimwiki'				"Note-taking in vim
Plugin 'tpope/vim-fugitive'				"git integration in vim
Plugin 'airblade/vim-gitgutter'			"git diff in the gutter

" Additions
Plugin 'christoomey/vim-system-copy'	"Access system clipboard -requires xsel
Plugin 'tommcdo/vim-exchange'			"Exchange two pieces of text
Plugin 'tpope/vim-surround'				"Add s object for surrounding elements
Plugin 'tpope/vim-commentary'			"Auto-comment with gc
Plugin 'tpope/vim-repeat'				"Add . command support for plugins
Plugin 'jiangmiao/auto-pairs'			"Auto-pairs parenses and other things
Plugin 'godlygeek/tabular'				"Aligns things

Plugin 'benmills/vimux'					"Interact with a tmux pane from vim
Plugin 'christoomey/vim-tmux-navigator' "Navigating from vim and tmux panes

" Looks
Plugin 'vim-airline/vim-airline-themes'	"Themes for airline
Plugin 'ryanoasis/vim-devicons'			"Adds icons to NERDTree, Airline etc
Plugin 'morhetz/gruvbox'				"A theme inspired by solarized
Plugin 'jacoborus/tender.vim'			"A nice theme with airline theme
Plugin 'bluz71/vim-moonfly-colors'
" Plugin 'flazz/vim-colorschemes'		"A whole lot of themes... Heavy...
" Plugin 'edkolev/tmuxline.vim'			"Generates tmux statusline styles

" All plugins before this
call vundle#end()
"}}}

" Defaults for plugins"{{{
let NERDTreeMapActivateNode='<space>'
let NERDTreeShowHidden = 1
let g:ctrlp_show_hidden = 1
let g:vimwiki_list = [{'path': '~/Documents/Notebooks/vimwiki/', 'syntax': 'markdown', 'ext': '.markdown'}]

" Defaults for SuperTab
autocmd FileType markdown,txt setlocal complete+=kspell
let g:SuperTabDefaultCompletionType = "context"
let g:SuperTabContextDefaultCompletionType = "<c-x><c-o>"

" Defaults for syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_javascript_checkers = ['jshint']

" Defaults for Tagbar
let g:tagbar_map_showproto = "f"
let g:tagbar_map_togglefold = "<Space>"
let g:tagbar_width = 30
let g:tagbar_autofocus = 1

" Emmet defaults
let g:user_emmet_install_global = 0
autocmd FileType html,php,css EmmetInstall
let g:user_emmet_leader_key = "<C-f>"

" Airline status
set laststatus=2                                  " Show the status line all the time
set showtabline=2 " Always show tab bar
let g:airline_skip_empty_sections=1
let g:airline#extensions#tabline#enabled=1        " Show tabline for buffers
let g:airline#extensions#tabline#buffer_nr_show=1 " Show buffer numbers
let g:airline#extensions#syntastic#enabled=1	  " Enable Syntastic support
let g:airline#extensions#branch#enabled=1		  " Enable Git support
let g:airline_powerline_fonts=1                   " Use powerline font fully
let g:Powerline_symbols = 'fancy'

" Tmux navigator
" let g:tmux_navigator_no_mappings = 1

" nnoremap <silent> {Left-mapping} :TmuxNavigateLeft<cr>
" nnoremap <silent> {Down-Mapping} :TmuxNavigateDown<cr>
" nnoremap <silent> {Up-Mapping} :TmuxNavigateUp<cr>
" nnoremap <silent> {Right-Mapping} :TmuxNavigateRight<cr>
" nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>


"}}}

" Visual stuff"{{{
" Enables syntax highlighting by default.
if !exists("g:syntax_on")
	syntax enable
endif

" If using a dark background within the editing area
set background=dark

" True colour terminal
"set termguicolors

"gruvbox, tender, moonfly, benokai, darkblue, desert, koehler, molokai...
colorscheme gruvbox
"gruvbox, tender, moonfly, bubblegum
let g:airline_theme = 'gruvbox'
"}}}

" Temporary / Config test{{{

" Quite awesome, but it gives nerdtree and tagbar numbers as well...
" augroup editor_stuff
" 	autocmd!
" 	autocmd BufLeave * :set norelativenumber
" 	autocmd BufEnter * :set relativenumber
" 	autocmd InsertEnter * :set norelativenumber
" 	autocmd InsertLeave * :set relativenumber
" augroup END

"}}}

" Custom bindings{{{
let mapleader = ',' "Set a Leader for more bindings

nnoremap z <C-r>

" Leader bindings{{{
" Easy shortcuts
nmap <silent> <Leader>s :w<CR>
nmap <silent> <Leader>q :q<CR>
nmap <silent> <Leader>wq :wq<CR>

" Remap spell bindings
nnoremap <Leader>zg zg
nnoremap <Leader>zw zw
nnoremap <Leader>zz z=

" Open current buffer to the right, and change this split's
" buffer to the previous
nmap <silent> <Leader>v :vs<CR><C-h>:bp<CR><C-l>

" Use enter to create new lines w/o entering insert mode
nnoremap <CR> o<Esc>k

" F1 to open custom bindings help
nnoremap <silent> <F1> :40vsplit $HOME/Dev/dotfiles/vim/bindings.md<CR>

" Laravel framework commons
nmap <Leader>lr :e routes/web.php<CR>
nmap <Leader>la :e config/app.php<CR>81Gf(%O
nmap <Leader>ld :e config/database.php<CR>
nmap <Leader>lc :e composer.json<CR>
"}}}

" Toggles for features{{{
nmap <silent> <Leader>n :NERDTreeToggle<CR>
nmap <silent> <Leader>g :GitGutterToggle<CR>
nmap <silent> <Leader>tt :TagbarToggle<CR>

" Toggles for features (work in insert)
nnoremap <F4> :GitGutterToggle<CR>
inoremap <F4> <Esc> :GitGutterToggle<CR>gi
nnoremap <F5> :setlocal spell! spelllang=en,fr<CR>
inoremap <F5> <Esc>:setlocal spell! spelllang=en,fr<CR>gi
nnoremap <F6> :NERDTreeToggle<CR>
inoremap <F6> <Esc>:NERDTreeToggle<CR>gi
nnoremap <F7> :TagbarToggle<CR>
inoremap <F7> <Esc>:TagbarToggle<CR>gi
nnoremap <F8> :SyntasticToggleMode<CR>
inoremap <F8> <Esc>:SyntasticToggleMode<CR>gi

" Vimux stuff
nnoremap <leader>rp :VimuxPromptCommand<CR>
nnoremap <leader>ro :call VimuxRunCommand("ls")<CR>
nnoremap <leader>rl :VimuxRunLastCommand<CR>
nnoremap <leader>rq :VimuxCloseRunner<CR>
nnoremap <leader>rz :VimuxZoomRunner<CR>

" Tabular stuff
nnoremap <leader>tg :Tabularize /
nnoremap <leader>tq :Tabularize /"<CR>
nnoremap <leader>te :Tabularize /=<CR>
"}}}

" Basic movement{{{
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'
noremap  <silent> <Up>   gk
noremap  <silent> <Down> gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End> <C-o>g<End>

" Skip lines: faster navigation
nnoremap <PageUp> H
nnoremap <PageDown> L
nnoremap J 5j
nnoremap K 5k
nnoremap H 0
nnoremap L $

" Mappings to access buffers
" Back one buffer
nnoremap <Leader>. :bp<CR>
" Forward one buffer
nnoremap <Leader>- :bn<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <Leader>x :bp\|bd #<CR>

" Buffer navigation like Firefox
nnoremap <C-S-tab> :bp<CR>
nnoremap <C-tab> :bn<CR>
inoremap <C-S-tab> <Esc>:bp<CR>i
inoremap <C-tab> <Esc>:bn<CR>i
"}}}

" Control bindings{{{
" Mappings for following tags (<C-p> to go back)
nnoremap <C-i> <C-]>
nnoremap <C-o> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Resize panes
nnoremap <silent> <C-w>l :vertical resize +5<CR>
nnoremap <silent> <C-w>h :vertical resize -5<CR>
nnoremap <silent> <C-w>k :resize +5<CR>
nnoremap <silent> <C-w>j :resize -5<CR>
"}}}

"}}}

" Custom commands{{{
command! MakeTags !ctags -R .

command CheatSheet e ~/Dev/dotfiles/vim/vimcheatsheet.md
command TmuxCheatSheet e ~/Dev/dotfiles/tmux/tmuxcheatsheet.md
command VimRC e ~/Dev/dotfiles/vim/vimrc
command TmuxConf e ~/.tmux.conf

" Write when the file wasn't opened with sudo privileges
cmap w!! w !sudo tee % > /dev/null

" Strip trailing whitespaces
" Taken from https://github.com/ntpeters
" -> :call StripWhitespace(10, 21)
let g:whitespace_group='[\u0009\u0020\u00a0\u1680\u180e\u2000-\u200b\u202f\u205f\u3000\ufeff]'
let g:eol_whitespace_pattern = g:whitespace_group . '\+$'
function! g:StripWhitespace( line1, line2 )
	let _s = @/
	let l  = line(".")
	let c  = col(".")
	silent! execute ':' . a:line1 . ',' . a:line2 . 's/' . g:eol_whitespace_pattern . '//e'
	let @/=_s
	call cursor(l, c)
endfunction
"}}}

" Autocmd, misc{{{
" Jump to the last position when reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Load indentation rules and plugins according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Enable spellcheck for markdown files
" autocmd FileType markdown setlocal spell spelllang=en,fr
autocmd FileType gitcommit setlocal spell spelllang=en,fr

" Close vim if NERDTree is the last opened buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Tab-completion for files
set path+=**
set wildmenu "Display all matching files with tab
"}}}

" Set options{{{
set showcmd            " Show (partial) command in status line.
set showmatch          " Show matching brackets.
set encoding=utf-8     " The encoding displayed.
set fileencoding=utf-8 " The encoding written to file.
set ignorecase         " Do case insensitive matching
set smartcase          " Do smart case matching
set incsearch          " Incremental search
set autowrite          " Automatically save before commands like :next and :make
set hidden             " Hide buffers when they are abandoned
set mouse=a            " Enable mouse usage (all modes)
set wrapscan           " Searches wrap around end of file
set linebreak          " Break only at word boundaries
set notimeout          " Don't timeout after Leader for example
set ttimeout           " Don't do the previous thing for Escape

" Set more options
set number relativenumber
set cursorline					  " Highlight line where cursor is
set shortmess+=I				  " Don't show the welcome screen
set noshowmode                    " Don't show the current mode (airline)
set completeopt=menuone,noinsert  " Always show the menu, don't insert completion
set timeoutlen=1000 ttimeoutlen=0 " Removes the delay for escape key
set autoread                      " Reload files changed outside vim
set splitright                    " Open new splits on the right
set splitbelow					  " Open new splits below, if not on the right
set scrolloff=3                   " Start scrolling three lines before end
set sidescrolloff=3               " Start scrolling three columns before end
set synmaxcol=300				  " Only syntax highlight the first 200 columns
" set updatetime=750				  " Refresh frequency?
set confirm						  " Dialog when :q, :w or :wq fails
set undofile					  " Persistent undo across sessions

" Set dirs for swap and others
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//
"}}}

" Tabs{{{
set autoindent
set smartindent
set noexpandtab 	"Tabs ftw
set smarttab 		"Tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 		"The visible width of tabs
set softtabstop=4 	"Edit as if the tabs are 4 characters wide
set shiftwidth=4 	"Number of spaces to use for indent and unindent
set shiftround 		"Round indent to a multiple of 'shiftwidth'
"}}}

" Code folding{{{
set foldmethod=marker " Fold based on markers
set foldnestmax=5     " 5 levels deep folds
set foldenable        " Enable folding
set foldlevel=0       " Close all folds by default

" Space to open/close folds in normal mode, to create new ones in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
"}}}
