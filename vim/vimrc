" Never move this
runtime! debian.vim
set nocompatible "Not compatible with vi

" Vundle plugins"{{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim "Set runtime path to include Vundle
call vundle#begin()

" Plugins list
Plugin 'VundleVim/Vundle.vim'

" Syntax
Plugin 'ervandew/supertab'                " Easy tab completion
Plugin 'scrooloose/syntastic'             " Syntax checker
Plugin 'sheerun/vim-polyglot'             " 100+ languages syntax
Plugin 'Rip-Rip/clang_complete'           " C/C++ autocomplete

" Tags, style
Plugin 'ludovicchabant/vim-gutentags'     " Manages tags file for us
Plugin 'majutsushi/tagbar'                " Lists the file's tags
Plugin 'editorconfig/editorconfig-vim'    " Have vim adapt to different projects
Plugin 'ap/vim-css-color'                 " Preview colours in the file

" Functionality
Plugin 'vim-airline/vim-airline'          " Nice looking airline
Plugin 'scrooloose/nerdtree'              " Classic nerdtree
Plugin 'Xuyuanp/nerdtree-git-plugin'      " git interaction in nerdtree
Plugin 'mattn/emmet-vim'                  " Emmet for vim (<C-y>,)
Plugin 'vimwiki/vimwiki'                  " Note-taking in vim
Plugin 'tpope/vim-fugitive'               " git integration in vim
Plugin 'airblade/vim-gitgutter'           " git diff in the gutter

" Additions
Plugin 'christoomey/vim-system-copy'      " Access system clipboard -requires xsel
Plugin 'tommcdo/vim-exchange'             " Exchange two pieces of text
Plugin 'tpope/vim-surround'               " Add s object for surrounding elements
Plugin 'tpope/vim-commentary'             " Auto-comment with gc
Plugin 'tpope/vim-repeat'                 " Add . command support for plugins
Plugin 'raimondi/delimitmate'             " Auto-pairs parenses and other things
Plugin 'godlygeek/tabular'                " Aligns things
Plugin 'christoomey/vim-tmux-navigator'   " Navigating from vim and tmux panes

" Looks
Plugin 'morhetz/gruvbox'                  " A theme inspired by solarized
Plugin 'romainl/Apprentice'				  " Nice theme, yés good
Plugin 'altercation/vim-colors-solarized' " Solarized (dark and light)
Plugin 'jacoborus/tender.vim'             " A nice theme with airline theme
Plugin 'bluz71/vim-moonfly-colors'		  " Moonfly theme
Plugin 'ryanoasis/vim-devicons'           " Adds icons to NERDTree, Airline etc
Plugin 'vim-airline/vim-airline-themes'   " Themes for airline

" Plugin 'ctrlpvim/ctrlp.vim'			"Fuzzy finder/buffer manager
" let g:ctrlp_show_hidden = 1
" Plugin 'flazz/vim-colorschemes'		"A whole lot of themes... Heavy...
" Plugin 'edkolev/tmuxline.vim'			"Generates tmux statusline styles

" All plugins before this
call vundle#end()
"}}}

" Defaults for plugins"{{{
let NERDTreeMapActivateNode='<space>'
let NERDTreeShowHidden = 1
let NERDTreeShowBookmarks = 1
let NERDTreeNaturalSort = 1
let NERDTreeMinimalUI=1
let g:vimwiki_list = [{'path': '~/Notebooks/vimwiki/', 'syntax': 'markdown', 'ext': '.markdown'}]

" Defaults for SuperTab
let g:SuperTabDefaultCompletionType = "context"
" let g:SuperTabContextDefaultCompletionType = \"<c-x><c-o>"
let g:delimitMate_expand_cr=1
let g:delimitMate_expand_space=1

" Defaults for syntastic
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_php_checkers = ['php', 'phpcs']
let g:syntastic_javascript_checkers = ['jshint']
let g:syntastic_cpp_compiler_options = '-std=c++11 -Wall -Wconversion -Wextra -pedantic'

" This is for C/C++ smart autocompletion
let g:clang_library_path='/usr/lib/llvm-3.8/lib/libclang-3.8.so.1'

" Defaults for Tagbar
let g:tagbar_map_showproto = "f"		" f to show function's prototype
let g:tagbar_map_togglefold = "<Space>"
let g:tagbar_width = 30
let g:tagbar_autofocus = 1

" Emmet defaults
let g:user_emmet_install_global = 0
autocmd FileType html,php,css EmmetInstall
let g:user_emmet_leader_key = "<C-f>"

" Airline status
set laststatus=2                                  " Always show status line
set showtabline=2								  " Always show tab bar
let g:airline_left_sep=""						  " Default: >
let g:airline_right_sep=""						  " Default: <
let g:airline_right_alt_sep=""
let g:airline_left_alt_sep=""
let g:airline_skip_empty_sections=1
let g:airline#extensions#tabline#enabled=1        " Show tabline for buffers
" let g:airline#extensions#tabline#buffer_nr_show=1 " Show buffer numbers
let g:airline#extensions#syntastic#enabled=1	  " Enable Syntastic support
let g:airline#extensions#branch#enabled=1		  " Enable Git support
let g:airline_powerline_fonts=1                   " Use powerline font fully
let g:Powerline_symbols = 'fancy'

" Colorschemes config
let g:gruvbox_contrast_light = 'hard'
"}}}

" Visual stuff"{{{
" Enables syntax highlighting by default.
if !exists("g:syntax_on")
	syntax enable
endif

" If using a dark background within the editing area
set background=dark

"gruvbox, tender, moonfly, benokai, darkblue, desert, koehler, molokai...
colorscheme gruvbox
"gruvbox, tender, moonfly, bubblegum, solarized
let g:airline_theme = 'gruvbox'
"}}}

" Temporary / Config test{{{
" Strip trailing whitespaces
" Taken from https://github.com/ntpeters -> :call StripWhitespace(10, 21)
let g:whitespace_group='[\u0009\u0020\u00a0\u1680\u180e\u2000-\u200b\u202f\u205f\u3000\ufeff]'
let g:eol_whitespace_pattern = g:whitespace_group . '\+$'
function! g:StripWhitespace( line1, line2 )
	let _s = @/
	let l  = line(".")
	let c  = col(".")
	silent! execute ':' . a:line1 . ',' . a:line2 . 's/' . g:eol_whitespace_pattern . '//e'
	let @/=_s
	call cursor(l, c)
endfunction

" function CallTms(command)
" 	silent! execute ':!tmux send-keys -t right ' . a:command . ' C-m'
" endfunction

" nnoremap H 0
" nnoremap L $
" nnoremap <PageUp> H
" nnoremap <PageDown> L

"Remove all trailing whitespace by pressing F5
"nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>

" Tmux navigator
" let g:tmux_navigator_no_mappings = 1

" nnoremap <silent> {Left-mapping} :TmuxNavigateLeft<cr>
" nnoremap <silent> {Down-Mapping} :TmuxNavigateDown<cr>
" nnoremap <silent> {Up-Mapping} :TmuxNavigateUp<cr>
" nnoremap <silent> {Right-Mapping} :TmuxNavigateRight<cr>
" nnoremap <silent> {Previous-Mapping} :TmuxNavigatePrevious<cr>
"}}}

" Custom bindings{{{
let mapleader = ',' "Set a Leader for more bindings

" Misc{{{
nnoremap z <C-r>

" Use enter to create new lines w/o entering insert mode
nnoremap <CR> o<Esc>k

" F1 to open custom bindings help
nnoremap <silent> <F1> :40vsplit $HOME/Dev/dotfiles/vim/bindings.md<CR>

" Write when the file wasn't opened with sudo privileges
cmap w!! w !sudo tee % > /dev/null
"}}}

" Basic (Movement, save, spell){{{
" Movement
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'
noremap  <silent> <Up>   gk
noremap  <silent> <Down> gj
noremap  <silent> <Home> g<Home>
noremap  <silent> <End>  g<End>
inoremap <silent> <Home> <C-o>g<Home>
inoremap <silent> <End> <C-o>g<End>

" Skip lines: faster navigation
nnoremap J 5j
nnoremap K 5k

" Easy shortcuts
nmap <silent> <Leader>s :w<CR>
nmap <silent> <Leader>q :q<CR>
nmap <silent> <Leader>wq :wq<CR>

" Remap spell bindings
nnoremap <Leader>zg zg
nnoremap <Leader>zw zw
nnoremap <Leader>zz z=
"}}}

" Buffers, panes{{{
" Open current buffer to the right, and change this split's
" buffer to the previous
nmap <silent> <Leader>v :vs<CR><C-h>:bp<CR><C-l>

" Back one buffer
nnoremap <Leader>. :bp<CR>
" Forward one buffer
nnoremap <Leader>- :bn<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <Leader>x :bp\|bd #<CR>

" Resize panes
nnoremap <silent> <C-w>l :vertical resize +5<CR>
nnoremap <silent> <C-w>h :vertical resize -5<CR>
nnoremap <silent> <C-w>k :resize +5<CR>
nnoremap <silent> <C-w>j :resize -5<CR>
"}}}

" Toggles for features{{{
nmap <silent> <Leader>n :NERDTreeToggle<CR>
nmap <silent> <Leader>g :GitGutterToggle<CR>
nmap <silent> <Leader>tt :TagbarToggle<CR>

" Toggles for insert mode
call togglebg#map("<F3>")
nnoremap <F4> :GitGutterToggle<CR>
inoremap <F4> <Esc> :GitGutterToggle<CR>gi
nnoremap <F5> :setlocal spell! spelllang=en,fr<CR>
inoremap <F5> <Esc>:setlocal spell! spelllang=en,fr<CR>gi
nnoremap <F6> :NERDTreeToggle<CR>
inoremap <F6> <Esc>:NERDTreeToggle<CR>gi
nnoremap <F7> :TagbarToggle<CR>
inoremap <F7> <Esc>:TagbarToggle<CR>gi
nnoremap <F8> :SyntasticToggleMode<CR>
inoremap <F8> <Esc>:SyntasticToggleMode<CR>gi
"}}}

" Prog helpers{{{
" Insert semicolon at end of line
inoremap <Leader>; <Esc>A;<Esc>
nnoremap <Leader>; A;<Esc>

" Insert curly braces at end of line
inoremap <Leader>à <Esc>A<Space>{}<Esc>i
nnoremap <Leader>à A<Space>{}<Esc>i

" Mappings for following tags (<C-p> to go back)
nnoremap <C-i> <C-]>
nnoremap <C-o> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Latex/mathjax helpers
nmap <Leader>mf i\frac{
nmap <Leader>mr i\sqrt{
nmap <Leader>mx i\cdot

" Tabular stuff
nnoremap <leader>tg :Tabularize /
nnoremap <leader>tb :Tabularize /\/\/<CR>
nnoremap <leader>te :Tabularize /=<CR>

" Laravel framework commons
nmap <Leader>lr :e routes/web.php<CR>
nmap <Leader>la :e config/app.php<CR>
nmap <Leader>ld :e config/database.php<CR>
nmap <Leader>lc :e composer.json<CR>
"}}}

" Compile files (prog, pdfs...){{{
" Creates html file with mathjax support in html folder
nmap <silent> <Leader>ph :!pandoc % -s --mathjax --toc --css pandoc.css -o html/%:r.html<CR><CR>
" Create pdf from markdown in pdf folder
nmap <silent> <Leader>pp :!pandoc % -s --toc --css pandoc.css -o %:r.pdf<CR><CR>

" Create pdf from Latex
nmap <silent> <Leader>lp :!pdflatex %<CR><CR>
nmap <silent> <Leader>lx :!xelatex %<CR><CR>
" Open PDF file in zathura
nmap <silent> <Leader>lz :!zathura %:r.pdf&<CR><CR>

" g++ compiler
nmap <Leader>cp :!g++ % -o bin/%:r -Wall -Wconversion -Wextra -pedantic -std=c++11<CR><CR>
" Makefile
nmap <Leader>cm :!make<CR>
" Run current file's binary
nmap <Leader>cr :!tmux send-keys -t right ./bin/%:r C-m<CR><CR>
"}}}

" Tmux right pane commands{{{
nnoremap <silent> <Leader>tm :Silent tms<space>
nnoremap <silent> <Leader>tl :!tmux send-keys -t right C-p C-m<CR><CR>
nnoremap <silent> <Leader>tc :!tmux send-keys -t right C-q<CR><CR>
nnoremap <silent> <Leader>tq :!tmux send-keys -t right exit C-m<CR><CR>
"}}}

"}}}

" Custom functions and commands{{{
command! -nargs=1 Silent
\   execute 'silent !' . <q-args>
\ | execute 'redraw!'

command! MakeTags !ctags -R .

command Snipcppex 0r ~/Dev/dotfiles/vim/snippets/CPPEx.txt
command Snipcpplab 0r ~/Dev/dotfiles/vim/snippets/CPPLab.txt
command Sniplatex 0r ~/Dev/dotfiles/vim/snippets/Latex.txt
command Sniplatexgraph r ~/Dev/dotfiles/vim/snippets/LatexGraph.txt
command Snipdoxyfunc r ~/Dev/dotfiles/vim/snippets/DoxyFunc.txt

command CheatSheet e ~/Dev/dotfiles/vim/vimcheatsheet.md
command TmuxCheatSheet e ~/Dev/dotfiles/tmux/tmuxcheatsheet.md
command Vconf e ~/Dev/dotfiles/vim/vimrc
command Tconf e ~/.tmux.conf
"}}}

" Autocmd, misc{{{
" Disable current line highlight when split not in focus
augroup line_highlight
	autocmd!
	autocmd BufLeave * :set nocursorline
	autocmd BufEnter * :set cursorline
	autocmd InsertEnter * :set cursorline
	autocmd InsertLeave * :set nocursorline
augroup END

" Enable spellcheck for certain files
autocmd FileType markdown,gitcommit,tex setlocal spell spelllang=en,fr

" Colour misspelled words in red
highlight SpellBad ctermfg=001 ctermbg=none cterm=none

" INF1 max column count
autocmd FileType cpp setlocal colorcolumn=85

" Close vim if NERDTree is the last opened buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Tab-completion for files
set path+=**
set wildmenu "Display all matching files with tab

" Jump to the last position when reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Load indentation rules and plugins according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

"}}}

" Set options{{{
set showcmd            " Show (partial) command in status line.
set showmatch          " Show matching brackets.
set encoding=utf-8     " The encoding displayed.
set fileencoding=utf-8 " The encoding written to file.
set ignorecase         " Do case insensitive matching
set smartcase          " Do smart case matching
set incsearch          " Incremental search
set autowrite          " Automatically save before :next and :make...
set hidden             " Hide buffers when they are abandoned
set mouse=a            " Enable mouse usage (all modes)
set wrapscan           " Searches wrap around end of file
set linebreak          " Break only at word boundaries
set notimeout          " Don't timeout after Leader for example
set ttimeout           " Don't do the previous thing for Escape

" Set more options
set number
" set relativenumber
set cursorline					  " Highlight line where cursor is
set shortmess+=I				  " Don't show the welcome screen
set noshowmode                    " Don't show the current mode (airline)
set omnifunc=syntaxcomplete#Complete
set completeopt=menu,menuone	  " Always show the menu
set timeoutlen=1000 ttimeoutlen=0 " Removes the delay for escape key in tmux
set autoread                      " Reload files changed outside vim
set splitright                    " Open new splits on the right
set splitbelow					  " Open new splits below, if not on the right
set scrolloff=3                   " Start scrolling three lines before end
set sidescrolloff=3               " Start scrolling three columns before end
set synmaxcol=300				  " Only syntax highlight the first so much columns
set confirm						  " Dialog when :q, :w or :wq fails
set undofile					  " Persistent undo across sessions

" Tabs
set autoindent
set smartindent
set noexpandtab 	"Tabs ftw
set smarttab 		"Tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 		"The visible width of tabs
set softtabstop=4 	"Edit as if the tabs are 4 characters wide
set shiftwidth=4 	"Number of spaces to use for indent and unindent
set shiftround 		"Round indent to a multiple of 'shiftwidth'

" Set dirs for swap and others
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" Tests
" set updatetime=750 " Refresh frequency?
" set ttymouse=urxvt " Make the mouse work as in GUI Vim
" set ttymouse=sgr   " Fix problems on the far right side of the file
"}}}

" Code folding{{{
set foldmethod=marker " Fold based on markers
set foldnestmax=5     " 5 levels deep folds
set foldenable        " Enable folding
set foldlevel=0       " Close all folds by default

" Spacebar to open/close folds in normal mode,
" and also to create new ones in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
"}}}
