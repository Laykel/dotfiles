" Never move this
runtime! debian.vim

set nocompatible "Not compatible with vi

" Vundle plugins"{{{
filetype off
set rtp+=~/.vim/bundle/Vundle.vim "Set runtime path to include Vundle
call vundle#begin()

" Plugins list
Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-fugitive'				"git integration in vim
Plugin 'scrooloose/nerdtree'			"Classic nerdtree
Plugin 'Xuyuanp/nerdtree-git-plugin'	"git interaction in nerdtree
Plugin 'airblade/vim-gitgutter'			"git diff in the gutter
Plugin 'scrooloose/syntastic'			"Syntax checker
Plugin 'terryma/vim-multiple-cursors'	"Sublime style multiple cursors

Plugin 'vim-airline/vim-airline'		"Nice looking airline
Plugin 'vim-airline/vim-airline-themes'
Plugin 'ap/vim-css-color'				"Preview colours in the file
" Plugin 'edkolev/tmuxline.vim'			"Generates tmux statusline styles

Plugin 'christoomey/vim-system-copy'	"Access system clipboard (requires xsel package)

Plugin 'tpope/vim-surround'				"Add s object for surrounding elements
Plugin 'tpope/vim-commentary'			"Auto-comment with gc
Plugin 'tpope/vim-repeat'				"Add . command support for plugins
Plugin 'jiangmiao/auto-pairs'			"Auto-pairs parenses and other things
Plugin 'godlygeek/tabular'				"Aligns things

Plugin 'benmills/vimux'					"Interact with a tmux pane from vim
Plugin 'christoomey/vim-tmux-navigator' "Makes navigating from vim and tmux panes more consistent

Plugin 'ryanoasis/vim-devicons'			"Adds icons to NERDTree, Airline etc

" Colorschemes/themes...
Plugin 'jacoborus/tender.vim'
Plugin 'flazz/vim-colorschemes'

" All plugins before this
call vundle#end()
"}}}

" Defaults for plugins"{{{
set laststatus=2                                  " Show the satus line all the time
let g:airline#extensions#tabline#enabled=1        " Show tabline for buffers
let g:airline#extensions#tabline#buffer_nr_show=1 " Show buffer numbers
let g:airline#extensions#syntastic#enabled=1
let g:airline_powerline_fonts=1                   " Use powerline font to its full potential
"}}}

" Visual stuff"{{{
" Enables syntax highlighting by default.
if !exists("g:syntax_on")
	syntax enable
endif

" If using a dark background within the editing area
set background=dark

" For tender colorscheme
if (has("termguicolors"))
	set termguicolors
endif

" tender, darkblue, desert, koehler, molokai...
colorscheme Benokai
let g:airline_theme = 'bubblegum'
"}}}

" Last position, indent rules, others"{{{
" Jump to the last position when reopening a file
if has("autocmd")
	au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Load indentation rules and plugins according to the detected filetype.
if has("autocmd")
	filetype plugin indent on
endif

" Close vim if NERDTree is the last opened buffer
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Tab-completion for files
set path+=**
set wildmenu "Display all matching files with tab
"}}}

" Set options"{{{
set showcmd		"Show (partial) command in status line.
set showmatch   "Show matching brackets.
set ignorecase	"Do case insensitive matching
set smartcase	"Do smart case matching
set incsearch	"Incremental search
set autowrite	"Automatically save before commands like :next and :make
set hidden	    "Hide buffers when they are abandoned
set mouse=a		"Enable mouse usage (all modes)

" Set more options
set number relativenumber
set encoding=utf8
set autoindent
set smartindent
set splitright		"Open new splits on the right
"}}}

" Tab control"{{{
set noexpandtab 	"Tabs ftw
set smarttab 		"Tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4 		"The visible width of tabs
set softtabstop=4 	"Edit as if the tabs are 4 characters wide
set shiftwidth=4 	"Number of spaces to use for indent and unindent
set shiftround 		"Round indent to a multiple of 'shiftwidth'
"}}}

" Code folding settings"{{{
set foldmethod=marker	"Fold based on indent
set foldnestmax=10		"10 levels deep folds
set foldenable			"Don't fold by default

" Space to open/close folds in normal mode, to create new ones in visual mode
nnoremap <silent> <Space> @=(foldlevel('.')?'za':"\<Space>")<CR>
vnoremap <Space> zf
"}}}

" Custom commands"{{{
command! MakeTags !ctags -R .

command CheatSheet vsp ~/Dev/dotfiles/vim/vimcheatsheet.md
command TmuxCheatSheet vsp ~/Dev/dotfiles/tmux/tmuxcheatsheet.md
command VimRC vsp ~/.vimrc
command TmuxConf vsp ~/.tmux.conf
"}}}

" Custom bindings"{{{
let mapleader = ',' "Set a leader for more bindings

nmap <silent> <leader>n :NERDTreeToggle<cr>
let NERDTreeMapActivateNode='<space>'

nmap <silent> <leader>g :GitGutterToggle<cr>
nmap <silent> <leader>s :w<cr>

" Mappings to access buffers
" List buffers
nnoremap <Leader>l :ls<CR>
" Back one buffer
nnoremap <Leader>b :bp<CR>
" Forward one buffer
nnoremap <Leader>f :bn<CR>
nnoremap <Leader>1 :1b<CR>
nnoremap <Leader>2 :2b<CR>
nnoremap <Leader>3 :3b<CR>
nnoremap <Leader>4 :4b<CR>
nnoremap <Leader>5 :5b<CR>
nnoremap <Leader>6 :6b<CR>
nnoremap <Leader>7 :7b<CR>
nnoremap <Leader>8 :8b<CR>
nnoremap <Leader>9 :9b<CR>
nnoremap <Leader>0 :10b<CR>
nnoremap <Leader>x :bp\|bd #<CR>

" Write when the file wasn't opened with sudo privileges
cmap w!! w !sudo tee % > /dev/null
"}}}
